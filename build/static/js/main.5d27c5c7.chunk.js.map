{"version":3,"sources":["sudokusolver.js","index.js"],"names":["SudokuSolver","board","this","mem","i","length","j","num","row","column","startRow","startCol","countRow","countCol","countSquare","squareI","squareJ","number","checkForDuplicates","next","col","log","count","findNextEmpty","pop","checkNumInRow","checkNumInColumn","checkNumInSquare","push","Square","props","className","onClick","value","React","Component","Board","state","solvable","solved","solveBoard","bind","fillSquare","slice","userInput","prompt","parseInt","alert","setState","targetBoard","result","solve","useBoard","button1","button2","status","restart","fillSample","renderSquare","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5d27c5c7.chunk.js","sourcesContent":["export class SudokuSolver {\n\n    constructor(board) {\n        this.mem = board;\n    };\n\n    findNextEmpty() {\n        for (let i = 0; i < this.mem[0].length; i++) {\n            for (let j = 0; j < this.mem[0].length; j++) {\n                if (this.mem[i][j] == 0) {\n                    return [i, j];\n                };\n            };\n        };\n    };\n\n    checkNumInRow(num, row) {\n        for (let j = 0; j < this.mem[0].length; j++) {\n            if (this.mem[row][j] == num) {\n                return true;\n            };\n        };\n        return false;\n    };\n\n    checkNumInColumn(num, column) {\n        for (let i = 0; i < this.mem[0].length; i++) {\n            if (this.mem[i][column] == num) {\n                return true;\n            };\n        };\n        return false;\n    };\n\n    checkNumInSquare(num, row, column) {\n        let startRow = 0;\n        let startCol = 0;\n        //In which 3x3 square is the number located?\n        if (row > 5) {startRow = 6}\n        else if (row > 2) {startRow = 3};\n\n        if (column > 5) {startCol = 6}\n        else if (column > 2) {startCol = 3};\n\n        //Iterate over the square.\n        for (let i = startRow; i < startRow + 3; i++) {\n            for (let j = startCol; j < startCol + 3; j++) {\n                if (this.mem[i][j] == num) {\n                    return true;\n                };\n            };\n        };\n        return false;\n    };\n\n    checkForDuplicates(num) {\n        //If there are two of the same numbers in the same row, column or square the algorithm will be stuck in an\n        //infinite loop.\n        let countRow = 0;\n        let countCol = 0;\n        let countSquare = 0;\n\n        //Check the rows.\n        for (let i = 0; i < this.mem.length; i++) {\n            countRow = 0;\n            for (let j = 0; j < this.mem.length; j++) {\n                if(this.mem[i][j] === num){\n                    countRow++;\n                    if (countRow > 1) { return true }\n                };\n            };\n        };\n\n        //Check the columns\n        for (let j = 0; j < this.mem.length; j++) {\n            countCol = 0;\n            for (let i = 0; i < this.mem.length; i++) {\n                if (this.mem[i][j] === num) {\n                    countCol++;\n                    if (countCol > 1) { return true;}\n                };\n            };\n        };\n\n        //Check the 9 squares\n        for (let squareI = 0; squareI < this.mem.length; squareI += 3) {\n            for (let squareJ = 0; squareJ < this.mem.length; squareJ += 3) {\n                countSquare = 0;\n                for (let i = squareI; i < squareI + 3; i++) {\n                    for (let j = squareJ; j < squareJ + 3; j++) {\n                        if (this.mem[i][j] === num) {\n                            countSquare++;\n                            if(countSquare > 1) {return true}\n                        };\n                    };\n                };\n            };\n        };\n\n        return false;\n    };\n\n    solve() {\n        //Check to see if there is no two of the same number in the same row, column and square.\n        for (let number = 1; number< 10; number++) {\n            if (this.checkForDuplicates(number)) {\n                return \"Unsolvable.\";\n            }\n        }\n\n        //This will solve the sudoku puzzle using the backtracking algorithm.\n        this.log = [];\n        this.count = 1;\n\n        let next;\n        let row;\n        let col;\n\n        //while there are empty cells on the matrix.\n        while(this.findNextEmpty()) {\n            //if all the numbers have been tested on the next empty cell, there is a problem.\n            //if there has been a problem on the previous attempt, push the last try from the log and work it again.\n            if (this.count > 9) {\n                next = this.log.pop();\n\n                //If the log is empty, then we tried all the possible combinations, the puzzle is unsolvable.\n                if (next) {\n                    row = next[0];\n                    col = next[1];\n                    this.mem[row][col] = 0;\n                    this.count = next[2];\n                    this.count++;\n\n                } else {\n                    return \"Unsolvable.\";\n                }\n\n            } else {\n                next = this.findNextEmpty();\n                row = next[0];\n                col = next[1];\n            };\n\n\n\n            //try until 9 to fit the counter in the empty cell, if it is a correct fit log the number and the cells.\n            while (this.count < 10) {\n                if (!this.checkNumInRow(this.count, row)){\n                    if (!this.checkNumInColumn(this.count, col)) {\n                        if (!this.checkNumInSquare(this.count, row, col)) {\n                            this.log.push([row, col, this.count]);\n                            this.mem[row][col] = this.count;\n                            this.count = 1;\n                            break;\n                        }\n                    }\n                }\n                this.count++;\n            };\n        };\n\n        let answer = [...this.mem];\n        return answer;\n    };\n\n};\n\nexport {SudokuSolver as default};\n\n//Some sample solvable boards to use with the React app.\n/*\nlet board1 = [\n    [0, 0, 3, 0, 5, 8, 0, 0, 9],\n    [0, 0, 9, 7, 4, 0, 0, 6, 2],\n    [0, 0, 0, 2, 0, 0, 5, 3, 8],\n    [4, 0, 2, 0, 0, 0, 0, 1, 3],\n    [9, 0, 0, 3, 0, 4, 0, 8, 7],\n    [6, 0, 8, 0, 7, 0, 2, 5, 0],\n    [3, 0, 0, 0, 0, 5, 0, 2, 0],\n    [0, 0, 5, 0, 3, 7, 0, 9, 0],\n    [0, 1, 7, 0, 0, 0, 3, 4, 0]\n];\n\n\nlet board2 = [\n    [0, 5, 1, 3, 6, 2, 7, 0, 0],\n    [0, 4, 0, 0, 5, 8, 0, 0, 0],\n    [0, 0, 0, 4, 0, 0, 0, 2, 5],\n    [0, 8, 0, 0, 0, 0, 9, 0, 3],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [7, 0, 5, 0, 0, 0, 0, 8, 0],\n    [1, 2, 0, 0, 0, 9, 0, 0, 0],\n    [0, 0, 0, 2, 8, 0, 0, 6, 0],\n    [0, 0, 8, 5, 3, 4, 2, 9, 0]\n];\n\n\nlet board3 = [\n    [0, 2, 0, 0, 0, 4, 3, 0, 0],\n    [9, 0, 0, 0, 2, 0, 0, 0, 8],\n    [0, 0, 0, 6, 0, 9, 0, 5, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 1],\n    [0, 7, 2, 5, 0, 3, 6, 8, 0],\n    [6, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 8, 0, 2, 0, 5, 0, 0, 0],\n    [1, 0, 0, 0, 9, 0, 0, 0, 3],\n    [0, 0, 9, 8, 0, 0, 0, 6, 0]\n]\n\nlet board4 = [\n    [0, 2, 0, 0, 0, 4, 3, 0, 0],\n    [0, 0, 0, 0, 2, 0, 0, 0, 0],\n    [0, 0, 0, 6, 0, 0, 0, 5, 0],\n    [1, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 7, 0, 5, 0, 0, 6, 0, 0],\n    [6, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 8, 0, 2, 0, 5, 0, 0, 0],\n    [0, 0, 0, 0, 9, 0, 0, 0, 3],\n    [0, 0, 9, 8, 0, 0, 0, 6, 0]\n]\n*/\n\n//-------------------------------------------For testing purposes--------------------------------------------------\n\n//let solver0 = new SudokuSolver(board0);\n//console.log(\"Solving 0\");\n//console.log(solver0.solve());\n /*\nsolver1 = new SudokuSolver(board1);\nsolver2 = new SudokuSolver(board2);\nsolver3 = new SudokuSolver(board3);\nsolver4 = new SudokuSolver(board4);\n\nconsole.log(\"Solving 1\");\nconsole.log(solver1.solve());\nconsole.log(\"Solving 2\");\nconsole.log(solver2.solve());\nconsole.log(\"Solving 3\");\nconsole.log(solver3.solve());\nconsole.log(\"Solving 4\");\nconsole.log(solver4.solve());\n*/\n\n\n","/*\n**React app to implement a algorithm to solve a sudoku board, you can input the values one by one or try one of the\nsample boards.\n**For more information regarding the inner workings of this app, please see sudokusolver.js.\nauthor: Luiz Fernando Bianchi dos Santos\n*/\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport SudokuSolver from './sudokusolver.js';\n\nclass Square extends React.Component {\n    constructor(props) {\n        super(props);\n    };\n\n     render() {\n        return (\n            <button className=\"square\"\n                    onClick={() => this.props.onClick()}\n            >\n                {(this.props.value > 0 ? this.props.value : \"\")}\n            </button>\n        );\n    };\n};\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            board: [\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0, 0, 0, 0, 0]\n            ],\n            solvable: true,\n            solved: false\n        };\n\n        this.solveBoard = this.solveBoard.bind(this);\n    };\n\n    renderSquare(i, j) {\n        return (\n            <Square value={this.state.board[i][j]}\n                    onClick={() => this.fillSquare(i, j)}\n            />\n        );\n    };\n\n    fillSquare(i, j) {\n        var board = this.state.board.slice();\n        var number;\n        var userInput = prompt(\"Enter a number.\");\n\n        try {\n            number = parseInt(userInput);\n            if(number > 9 || number < 1) {\n                alert(\"Please enter an integer from 1 to 9.\");\n            } else {\n                board[i][j] = number;\n                this.setState({board: board});\n            };\n        } catch {\n            alert(\"Please enter an integer from 1 to 9.\");\n        };\n    };\n\n    solveBoard() {\n        //Solves the array using the .solve() method of the class SudokuBoard.\n        let targetBoard = [...this.state.board];\n        let solver = new SudokuSolver(targetBoard);\n        let result = solver.solve();\n        if (result === \"Unsolvable.\") {\n            this.setState({solvable: false});\n        } else {\n            this.setState({\n                board: result,\n                solved: true\n            });\n        };\n    };\n\n    fillSample() {\n        //Fills in a sample game to test the app.\n        let board = [\n            [0, 2, 0, 0, 0, 4, 3, 0, 0],\n            [9, 0, 0, 0, 2, 0, 0, 0, 8],\n            [0, 0, 0, 6, 0, 9, 0, 5, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 1],\n            [0, 7, 2, 5, 0, 3, 6, 8, 0],\n            [6, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 8, 0, 2, 0, 5, 0, 0, 0],\n            [1, 0, 0, 0, 9, 0, 0, 0, 3],\n            [0, 0, 9, 8, 0, 0, 0, 6, 0]\n        ];\n        let useBoard = [...board];\n        this.setState({board: useBoard});\n    };\n\n    restart() {\n        //Resets the state of the board to the starting values.\n        this.setState({\n            board: [\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0, 0, 0, 0, 0]\n            ],\n            solvable: true,\n            solved: false\n        });\n    };\n\n    render() {\n\n        let status = 'Please enter the starting numbers.';\n        let button1;\n        let button2;\n\n        if(this.state.solved) {\n            status = \"Solved!\";\n            button1 = <button onClick={() => this.restart()}>Try again?</button>\n        } else {\n            button2 = <button onClick={() => this.fillSample()}>Try sample sudoku</button>;\n            button1 = <button onClick={() => this.solveBoard()}>Solve it!</button>;\n        }\n        if(this.state.solvable) {\n            //9x9 sudoku board, each square is a button that updates a field of the matrix.\n            return (\n            <div>\n                <div className=\"status\">{status}</div>\n\n                <div className=\"board-row\">\n                    {this.renderSquare(0, 0)}\n                    {this.renderSquare(0, 1)}\n                    {this.renderSquare(0, 2)}\n                    {this.renderSquare(0, 3)}\n                    {this.renderSquare(0, 4)}\n                    {this.renderSquare(0, 5)}\n                    {this.renderSquare(0, 6)}\n                    {this.renderSquare(0, 7)}\n                    {this.renderSquare(0, 8)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(1, 0)}\n                    {this.renderSquare(1, 1)}\n                    {this.renderSquare(1, 2)}\n                    {this.renderSquare(1, 3)}\n                    {this.renderSquare(1, 4)}\n                    {this.renderSquare(1, 5)}\n                    {this.renderSquare(1, 6)}\n                    {this.renderSquare(1, 7)}\n                    {this.renderSquare(1, 8)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(2, 0)}\n                    {this.renderSquare(2, 1)}\n                    {this.renderSquare(2, 2)}\n                    {this.renderSquare(2, 3)}\n                    {this.renderSquare(2, 4)}\n                    {this.renderSquare(2, 5)}\n                    {this.renderSquare(2, 6)}\n                    {this.renderSquare(2, 7)}\n                    {this.renderSquare(2, 8)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(3, 0)}\n                    {this.renderSquare(3, 1)}\n                    {this.renderSquare(3, 2)}\n                    {this.renderSquare(3, 3)}\n                    {this.renderSquare(3, 4)}\n                    {this.renderSquare(3, 5)}\n                    {this.renderSquare(3, 6)}\n                    {this.renderSquare(3, 7)}\n                    {this.renderSquare(3, 8)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(4, 0)}\n                    {this.renderSquare(4, 1)}\n                    {this.renderSquare(4, 2)}\n                    {this.renderSquare(4, 3)}\n                    {this.renderSquare(4, 4)}\n                    {this.renderSquare(4, 5)}\n                    {this.renderSquare(4, 6)}\n                    {this.renderSquare(4, 7)}\n                    {this.renderSquare(4, 8)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(5, 0)}\n                    {this.renderSquare(5, 1)}\n                    {this.renderSquare(5, 2)}\n                    {this.renderSquare(5, 3)}\n                    {this.renderSquare(5, 4)}\n                    {this.renderSquare(5, 5)}\n                    {this.renderSquare(5, 6)}\n                    {this.renderSquare(5, 7)}\n                    {this.renderSquare(5, 8)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(6, 0)}\n                    {this.renderSquare(6, 1)}\n                    {this.renderSquare(6, 2)}\n                    {this.renderSquare(6, 3)}\n                    {this.renderSquare(6, 4)}\n                    {this.renderSquare(6, 5)}\n                    {this.renderSquare(6, 6)}\n                    {this.renderSquare(6, 7)}\n                    {this.renderSquare(6, 8)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(7, 0)}\n                    {this.renderSquare(7, 1)}\n                    {this.renderSquare(7, 2)}\n                    {this.renderSquare(7, 3)}\n                    {this.renderSquare(7, 4)}\n                    {this.renderSquare(7, 5)}\n                    {this.renderSquare(7, 6)}\n                    {this.renderSquare(7, 7)}\n                    {this.renderSquare(7, 8)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(8, 0)}\n                    {this.renderSquare(8, 1)}\n                    {this.renderSquare(8, 2)}\n                    {this.renderSquare(8, 3)}\n                    {this.renderSquare(8, 4)}\n                    {this.renderSquare(8, 5)}\n                    {this.renderSquare(8, 6)}\n                    {this.renderSquare(8, 7)}\n                    {this.renderSquare(8, 8)}\n                </div>\n                <div className=\"button-1\">{button1}</div>\n                <div className=\"button-2\">{button2}</div>\n            </div>\n            );\n        } else {\n            return (\n            <div>\n                <div>The board you entered was not solvable</div>\n                <button onClick={() => this.restart()}>Try again?</button>\n            </div>\n            );\n        };\n    }\n}\n\n// ========================================\n\nReactDOM.render(\n    <Board />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}