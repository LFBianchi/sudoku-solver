{"ast":null,"code":"import _toConsumableArray from\"/home/lfbianchi/GitHub/sudoku-solver/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _classCallCheck from\"/home/lfbianchi/GitHub/sudoku-solver/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/lfbianchi/GitHub/sudoku-solver/node_modules/@babel/runtime/helpers/esm/createClass\";export var SudokuSolver=/*#__PURE__*/function(){function SudokuSolver(board){_classCallCheck(this,SudokuSolver);this.mem=board;}_createClass(SudokuSolver,[{key:\"findNextEmpty\",value:function findNextEmpty(){for(var i=0;i<this.mem[0].length;i++){for(var j=0;j<this.mem[0].length;j++){if(this.mem[i][j]===0){return[i,j];}}}}},{key:\"checkNumInRow\",value:function checkNumInRow(num,row){for(var j=0;j<this.mem[0].length;j++){if(this.mem[row][j]===num){return true;}}return false;}},{key:\"checkNumInColumn\",value:function checkNumInColumn(num,column){for(var i=0;i<this.mem[0].length;i++){if(this.mem[i][column]===num){return true;}}return false;}},{key:\"checkNumInSquare\",value:function checkNumInSquare(num,row,column){var startRow=0;var startCol=0;//In which 3x3 square is the number located?\nif(row>5){startRow=6;}else if(row>2){startRow=3;}if(column>5){startCol=6;}else if(column>2){startCol=3;}//Iterate over the square.\nfor(var i=startRow;i<startRow+3;i++){for(var j=startCol;j<startCol+3;j++){if(this.mem[i][j]===num){return true;}}}return false;}},{key:\"checkForDuplicates\",value:function checkForDuplicates(num){//If there are two of the same numbers in the same row, column or square the algorithm will be stuck in an\n//infinite loop.\nvar countRow=0;var countCol=0;var countSquare=0;//Check the rows.\nfor(var i=0;i<this.mem.length;i++){countRow=0;for(var j=0;j<this.mem.length;j++){if(this.mem[i][j]===num){countRow++;if(countRow>1){return true;}}}}//Check the columns\nfor(var _j=0;_j<this.mem.length;_j++){countCol=0;for(var _i=0;_i<this.mem.length;_i++){if(this.mem[_i][_j]===num){countCol++;if(countCol>1){return true;}}}}//Check the 9 squares\nfor(var squareI=0;squareI<this.mem.length;squareI+=3){for(var squareJ=0;squareJ<this.mem.length;squareJ+=3){countSquare=0;for(var _i2=squareI;_i2<squareI+3;_i2++){for(var _j2=squareJ;_j2<squareJ+3;_j2++){if(this.mem[_i2][_j2]===num){countSquare++;if(countSquare>1){return true;}}}}}}return false;}},{key:\"solve\",value:function solve(){//Check to see if there is no two of the same number in the same row, column and square.\nfor(var number=1;number<10;number++){if(this.checkForDuplicates(number)){return\"Unsolvable.\";}}//This will solve the sudoku puzzle using the backtracking algorithm.\nthis.log=[];this.count=1;var next;var row;var col;//while there are empty cells on the matrix.\nwhile(this.findNextEmpty()){//if all the numbers have been tested on the next empty cell, there is a problem.\n//if there has been a problem on the previous attempt, push the last try from the log and work it again.\nif(this.count>9){next=this.log.pop();//If the log is empty, then we tried all the possible combinations, the puzzle is unsolvable.\nif(next){row=next[0];col=next[1];this.mem[row][col]=0;this.count=next[2];this.count++;}else{return\"Unsolvable.\";}}else{next=this.findNextEmpty();row=next[0];col=next[1];}//try until 9 to fit the counter in the empty cell, if it is a correct fit log the number and the cells.\nwhile(this.count<10){if(!this.checkNumInRow(this.count,row)){if(!this.checkNumInColumn(this.count,col)){if(!this.checkNumInSquare(this.count,row,col)){this.log.push([row,col,this.count]);this.mem[row][col]=this.count;this.count=1;break;}}}this.count++;}}return _toConsumableArray(this.mem);}}]);return SudokuSolver;}();export{SudokuSolver as default};//Some sample solvable boards to use with the React app.\n/*\nlet board1 = [\n    [0, 0, 3, 0, 5, 8, 0, 0, 9],\n    [0, 0, 9, 7, 4, 0, 0, 6, 2],\n    [0, 0, 0, 2, 0, 0, 5, 3, 8],\n    [4, 0, 2, 0, 0, 0, 0, 1, 3],\n    [9, 0, 0, 3, 0, 4, 0, 8, 7],\n    [6, 0, 8, 0, 7, 0, 2, 5, 0],\n    [3, 0, 0, 0, 0, 5, 0, 2, 0],\n    [0, 0, 5, 0, 3, 7, 0, 9, 0],\n    [0, 1, 7, 0, 0, 0, 3, 4, 0]\n];\n\n\nlet board2 = [\n    [0, 5, 1, 3, 6, 2, 7, 0, 0],\n    [0, 4, 0, 0, 5, 8, 0, 0, 0],\n    [0, 0, 0, 4, 0, 0, 0, 2, 5],\n    [0, 8, 0, 0, 0, 0, 9, 0, 3],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [7, 0, 5, 0, 0, 0, 0, 8, 0],\n    [1, 2, 0, 0, 0, 9, 0, 0, 0],\n    [0, 0, 0, 2, 8, 0, 0, 6, 0],\n    [0, 0, 8, 5, 3, 4, 2, 9, 0]\n];\n\n\nlet board3 = [\n    [0, 2, 0, 0, 0, 4, 3, 0, 0],\n    [9, 0, 0, 0, 2, 0, 0, 0, 8],\n    [0, 0, 0, 6, 0, 9, 0, 5, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 1],\n    [0, 7, 2, 5, 0, 3, 6, 8, 0],\n    [6, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 8, 0, 2, 0, 5, 0, 0, 0],\n    [1, 0, 0, 0, 9, 0, 0, 0, 3],\n    [0, 0, 9, 8, 0, 0, 0, 6, 0]\n]\n\nlet board4 = [\n    [0, 2, 0, 0, 0, 4, 3, 0, 0],\n    [0, 0, 0, 0, 2, 0, 0, 0, 0],\n    [0, 0, 0, 6, 0, 0, 0, 5, 0],\n    [1, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 7, 0, 5, 0, 0, 6, 0, 0],\n    [6, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 8, 0, 2, 0, 5, 0, 0, 0],\n    [0, 0, 0, 0, 9, 0, 0, 0, 3],\n    [0, 0, 9, 8, 0, 0, 0, 6, 0]\n]\n*/ //-------------------------------------------For testing purposes--------------------------------------------------\n//let solver0 = new SudokuSolver(board0);\n//console.log(\"Solving 0\");\n//console.log(solver0.solve());\n/*\nsolver1 = new SudokuSolver(board1);\nsolver2 = new SudokuSolver(board2);\nsolver3 = new SudokuSolver(board3);\nsolver4 = new SudokuSolver(board4);\n\nconsole.log(\"Solving 1\");\nconsole.log(solver1.solve());\nconsole.log(\"Solving 2\");\nconsole.log(solver2.solve());\nconsole.log(\"Solving 3\");\nconsole.log(solver3.solve());\nconsole.log(\"Solving 4\");\nconsole.log(solver4.solve());\n*/","map":{"version":3,"sources":["/home/lfbianchi/GitHub/sudoku-solver/src/sudokusolver.js"],"names":["SudokuSolver","board","mem","i","length","j","num","row","column","startRow","startCol","countRow","countCol","countSquare","squareI","squareJ","number","checkForDuplicates","log","count","next","col","findNextEmpty","pop","checkNumInRow","checkNumInColumn","checkNumInSquare","push","default"],"mappings":"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","sourcesContent":["export class SudokuSolver {\n\n    constructor(board) {\n        this.mem = board;\n    };\n\n    findNextEmpty() {\n        for (let i = 0; i < this.mem[0].length; i++) {\n            for (let j = 0; j < this.mem[0].length; j++) {\n                if (this.mem[i][j] === 0) {\n                    return [i, j];\n                }\n            }\n        }\n    };\n\n    checkNumInRow(num, row) {\n        for (let j = 0; j < this.mem[0].length; j++) {\n            if (this.mem[row][j] === num) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    checkNumInColumn(num, column) {\n        for (let i = 0; i < this.mem[0].length; i++) {\n            if (this.mem[i][column] === num) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    checkNumInSquare(num, row, column) {\n        let startRow = 0;\n        let startCol = 0;\n        //In which 3x3 square is the number located?\n        if (row > 5) {startRow = 6}\n        else if (row > 2) {startRow = 3}\n\n        if (column > 5) {startCol = 6}\n        else if (column > 2) {startCol = 3}\n\n        //Iterate over the square.\n        for (let i = startRow; i < startRow + 3; i++) {\n            for (let j = startCol; j < startCol + 3; j++) {\n                if (this.mem[i][j] === num) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n\n    checkForDuplicates(num) {\n        //If there are two of the same numbers in the same row, column or square the algorithm will be stuck in an\n        //infinite loop.\n        let countRow = 0;\n        let countCol = 0;\n        let countSquare = 0;\n\n        //Check the rows.\n        for (let i = 0; i < this.mem.length; i++) {\n            countRow = 0;\n            for (let j = 0; j < this.mem.length; j++) {\n                if(this.mem[i][j] === num){\n                    countRow++;\n                    if (countRow > 1) { return true }\n                }\n            }\n        }\n\n        //Check the columns\n        for (let j = 0; j < this.mem.length; j++) {\n            countCol = 0;\n            for (let i = 0; i < this.mem.length; i++) {\n                if (this.mem[i][j] === num) {\n                    countCol++;\n                    if (countCol > 1) { return true;}\n                }\n            }\n        }\n\n        //Check the 9 squares\n        for (let squareI = 0; squareI < this.mem.length; squareI += 3) {\n            for (let squareJ = 0; squareJ < this.mem.length; squareJ += 3) {\n                countSquare = 0;\n                for (let i = squareI; i < squareI + 3; i++) {\n                    for (let j = squareJ; j < squareJ + 3; j++) {\n                        if (this.mem[i][j] === num) {\n                            countSquare++;\n                            if(countSquare > 1) {return true}\n                        }\n                    }\n                }\n            }\n        }\n\n        return false;\n    };\n\n    solve() {\n        //Check to see if there is no two of the same number in the same row, column and square.\n        for (let number = 1; number< 10; number++) {\n            if (this.checkForDuplicates(number)) {\n                return \"Unsolvable.\";\n            }\n        }\n\n        //This will solve the sudoku puzzle using the backtracking algorithm.\n        this.log = [];\n        this.count = 1;\n\n        let next;\n        let row;\n        let col;\n\n        //while there are empty cells on the matrix.\n        while(this.findNextEmpty()) {\n            //if all the numbers have been tested on the next empty cell, there is a problem.\n            //if there has been a problem on the previous attempt, push the last try from the log and work it again.\n            if (this.count > 9) {\n                next = this.log.pop();\n\n                //If the log is empty, then we tried all the possible combinations, the puzzle is unsolvable.\n                if (next) {\n                    row = next[0];\n                    col = next[1];\n                    this.mem[row][col] = 0;\n                    this.count = next[2];\n                    this.count++;\n\n                } else {\n                    return \"Unsolvable.\";\n                }\n\n            } else {\n                next = this.findNextEmpty();\n                row = next[0];\n                col = next[1];\n            }\n\n\n\n            //try until 9 to fit the counter in the empty cell, if it is a correct fit log the number and the cells.\n            while (this.count < 10) {\n                if (!this.checkNumInRow(this.count, row)){\n                    if (!this.checkNumInColumn(this.count, col)) {\n                        if (!this.checkNumInSquare(this.count, row, col)) {\n                            this.log.push([row, col, this.count]);\n                            this.mem[row][col] = this.count;\n                            this.count = 1;\n                            break;\n                        }\n                    }\n                }\n                this.count++;\n            }\n        }\n\n        return [...this.mem];\n    };\n\n}\n\nexport {SudokuSolver as default};\n\n//Some sample solvable boards to use with the React app.\n/*\nlet board1 = [\n    [0, 0, 3, 0, 5, 8, 0, 0, 9],\n    [0, 0, 9, 7, 4, 0, 0, 6, 2],\n    [0, 0, 0, 2, 0, 0, 5, 3, 8],\n    [4, 0, 2, 0, 0, 0, 0, 1, 3],\n    [9, 0, 0, 3, 0, 4, 0, 8, 7],\n    [6, 0, 8, 0, 7, 0, 2, 5, 0],\n    [3, 0, 0, 0, 0, 5, 0, 2, 0],\n    [0, 0, 5, 0, 3, 7, 0, 9, 0],\n    [0, 1, 7, 0, 0, 0, 3, 4, 0]\n];\n\n\nlet board2 = [\n    [0, 5, 1, 3, 6, 2, 7, 0, 0],\n    [0, 4, 0, 0, 5, 8, 0, 0, 0],\n    [0, 0, 0, 4, 0, 0, 0, 2, 5],\n    [0, 8, 0, 0, 0, 0, 9, 0, 3],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [7, 0, 5, 0, 0, 0, 0, 8, 0],\n    [1, 2, 0, 0, 0, 9, 0, 0, 0],\n    [0, 0, 0, 2, 8, 0, 0, 6, 0],\n    [0, 0, 8, 5, 3, 4, 2, 9, 0]\n];\n\n\nlet board3 = [\n    [0, 2, 0, 0, 0, 4, 3, 0, 0],\n    [9, 0, 0, 0, 2, 0, 0, 0, 8],\n    [0, 0, 0, 6, 0, 9, 0, 5, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 1],\n    [0, 7, 2, 5, 0, 3, 6, 8, 0],\n    [6, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 8, 0, 2, 0, 5, 0, 0, 0],\n    [1, 0, 0, 0, 9, 0, 0, 0, 3],\n    [0, 0, 9, 8, 0, 0, 0, 6, 0]\n]\n\nlet board4 = [\n    [0, 2, 0, 0, 0, 4, 3, 0, 0],\n    [0, 0, 0, 0, 2, 0, 0, 0, 0],\n    [0, 0, 0, 6, 0, 0, 0, 5, 0],\n    [1, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 7, 0, 5, 0, 0, 6, 0, 0],\n    [6, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 8, 0, 2, 0, 5, 0, 0, 0],\n    [0, 0, 0, 0, 9, 0, 0, 0, 3],\n    [0, 0, 9, 8, 0, 0, 0, 6, 0]\n]\n*/\n\n//-------------------------------------------For testing purposes--------------------------------------------------\n\n//let solver0 = new SudokuSolver(board0);\n//console.log(\"Solving 0\");\n//console.log(solver0.solve());\n /*\nsolver1 = new SudokuSolver(board1);\nsolver2 = new SudokuSolver(board2);\nsolver3 = new SudokuSolver(board3);\nsolver4 = new SudokuSolver(board4);\n\nconsole.log(\"Solving 1\");\nconsole.log(solver1.solve());\nconsole.log(\"Solving 2\");\nconsole.log(solver2.solve());\nconsole.log(\"Solving 3\");\nconsole.log(solver3.solve());\nconsole.log(\"Solving 4\");\nconsole.log(solver4.solve());\n*/\n\n\n"]},"metadata":{},"sourceType":"module"}